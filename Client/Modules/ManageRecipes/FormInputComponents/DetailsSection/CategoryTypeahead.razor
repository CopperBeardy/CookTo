@inject CategoryManager Manager
<div class="col col-sm-10">
    <BlazoredTypeahead MaximumSuggestions=3 id="typeaheadInput"
                       SearchMethod="SearchItems"
                       @bind-Value="Recipe.Category"
                       placeholder="Search for Category"
                       role="combobox"
                       aria-required="true"
                       aria-expanded="false"
                       aria-controls="true"
                       aria-haspopup="true"
                       EnableDropDown="false"
                       AddItemOnEmptyResultMethod="HandleAdd">
        <SelectedTemplate Context="category">
            <span role="menuitem">@category.Name</span>
        </SelectedTemplate>
        <ResultTemplate Context="category">
            @category.Name
        </ResultTemplate>
        <NotFoundTemplate Context="searchText">
            <span role="menuitem">
                Add "@searchText" as a new Category <br />
                new Category will be selected after being added.
            </span>
        </NotFoundTemplate>
    </BlazoredTypeahead>
    <ValidationMessage aria-alert="true" For="@(() => Recipe.Category)" />
</div>
@code {
    [Parameter] public Recipe Recipe { get; set; } = new();
    public IEnumerable<Category> Categories { get; set; } = new List<Category>();

    protected override async Task OnInitializedAsync()
    {
        Categories = await Manager.GetAllAsync();
    }

    private async Task<IEnumerable<Category>> SearchItems(string searchText) => await Task.FromResult(Categories.Where(x => x.Name.ToLower().Contains(searchText.ToLower())).ToList());

    private async Task<Category> HandleAdd(string searchAdd)
    {
        var result = await Manager.Insert(new Category() { Name = searchAdd.ToLower() });
        if (result is null) return null;

        Categories.Append(result);
        return await Task.FromResult(result);

    }
}