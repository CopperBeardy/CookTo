@inject    UtensilManager Manager
<div class="col col-sm-6">
    <BlazoredTypeahead MaximumSuggestions=3 id="typeaheadInput"
                       SearchMethod="SearchItems"
                       @bind-Value="UtensilPart.Utensil"
                       placeholder="Search"
                       role="combobox"
                       aria-required="true"
                       aria-expanded="false"
                       aria-controls="true"
                       aria-haspopup="true"
                       EnableDropDown="false"
                       AddItemOnEmptyResultMethod="HandleAdd">
        <SelectedTemplate Context="utensil">
            <span role="menuitem">@utensil.Name</span>
        </SelectedTemplate>
        <ResultTemplate Context="utensil">
            @utensil.Name
        </ResultTemplate>
        <NotFoundTemplate Context="searchText">
            <span role="menuitem">
                Add "@searchText" as a new Utensil <br />
                new Utensil will be selected after being added.
            </span>
        </NotFoundTemplate>
    </BlazoredTypeahead>
    <ValidationMessage aria-alert="true" For="@(() => UtensilPart)" />

</div>
@code {

     [Parameter] public UtensilPart UtensilPart{ get; set; } = new ();   
    public IEnumerable<Utensil> Utensils { get; set; } = new List<Utensil>();

        protected override async Task OnInitializedAsync()
    {
        Utensils = await Manager.GetAllAsync();
    }
    private async Task<IEnumerable<Utensil>> SearchItems(string searchText) => await Task.FromResult(Utensils.Where(x => x.Name.ToLower().Contains(searchText.ToLower())).ToList());

    private async Task<Utensil> HandleAdd(string searchAdd)
    {
        var result = await Manager.Insert(new Utensil() { Name = searchAdd.ToLower() });
        if (result is null) return null;

        Utensils.Append(result);
        return await Task.FromResult(result);

    }
}