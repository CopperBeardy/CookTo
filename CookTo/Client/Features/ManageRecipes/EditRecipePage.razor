@page "/edit-recipe/{RecipeId}"
@inject IUploadImageManager ImageManager
@inject IRecipeManager RecipeManager

<PageTitle>Edit Recipe - CookTo</PageTitle>

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/">Home</a></li>
        <li class="breadcrumb-item active" aria-current="page">Edit Recipe</li>
    </ol>
</nav>
@if(_isLoading)
{
    <p>Loading Recipe</p>
}
else
{
       <h3 class="mt-5 mb-4">Editing Recipe: @_recipe.Title</h3>
@if (_submitSuccessful)
{
    <SuccessAlert Message="Your trail has been added successfully!" />
}
else if (_errorMessage is not null)
{
    <ErrorAlert Message="@_errorMessage" />
}
}

<EditForm OnValidSubmit="SubmitEditRecipe" EditContext="_editContext">
    <FluentValidationValidator />    
        <DetailsFormSection Recipe=" _recipe" />
        <FormSection Title="Image"
                     HelpText="Image to show the what finsih recipe will look like">
            <FormFieldSet>
                <label for="recipeImage" class="font-italic text-secondary">Image</label>
                @if (string.IsNullOrWhiteSpace(_recipe.Image))
                {
                    <InputFile OnChange="LoadRecipeImage" class="form-control-file" id="recipeImage" accept=".png, .jpg, .jpeg" />
                }
                else
                {
                     <div class="card bg-dark text-white">
                    <img src="images/@_recipe.Image" />
                    <div class="card-img-overlay">
                        <button class="btn btn-primary btn-sm" @onclick="RemoveRecipeImage">Remove</button>
                    </div>
                </div>
                }
            </FormFieldSet>
        </FormSection>
        <RecipePartsFormSection Recipe=" _recipe"/>
        <UtensilsFormSection Recipe=" _recipe"/>
        <CookingStepsFormSection Recipe=" _recipe"/>
        <TipsFormSection Recipe ="_recipe"/>
 

    <div class="mt-4 mb-5">
        <div class="row">
            <div class="offset-4 col-8 text-right">
                <button class="btn btn-outline-secondary" type="button" @onclick="@(() => _recipe = new RecipeDto())">Reset</button>
                <button class="btn btn-primary" type="submit">Submit</button>
            </div>
        </div>
    </div>
</EditForm>
@code {
    private bool _isLoading;   
    private bool _submitSuccessful;
    private string? _errorMessage;
    private RecipeDto _recipe =new RecipeDto();
    private EditContext _editContext = default!;
    private IBrowserFile? _recipeImage;

    [Parameter] public string RecipeId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;
        _editContext = new EditContext(_recipe);
           
        _recipe = await RecipeManager.GetById(RecipeId);   
    }

    protected override void OnParametersSet()
    {
        _editContext = new EditContext(_recipe);
        _editContext.SetFieldCssClassProvider(new BootstrapCssClassProvider());
              
    }   

    public void ResetForm()
    {
        _recipe = new RecipeDto();
        _editContext = new EditContext(_recipe);
        _editContext.SetFieldCssClassProvider(new BootstrapCssClassProvider());
        _recipeImage = null;
    }
    private void LoadRecipeImage(InputFileChangeEventArgs args)
    {
        _recipeImage = args.File;
        _recipe.ImageAction = ImageAction.Add;
    }

    private void RemoveRecipeImage()
    {
        _recipeImage = null;
        _recipe.ImageAction = ImageAction.Remove;
    }

    private async Task SubmitEditRecipe()
    {

        var response = await RecipeManager.Update(_recipe);
        if (!response)
        {
            _errorMessage = "There was a problem saving your Recipe.";
            _submitSuccessful = false;
            StateHasChanged();
            return;
        }
        else
        {
           

            _submitSuccessful = true;
            if(_recipe.ImageAction == ImageAction.Add)
            {
                _submitSuccessful = await ProcessImage(_recipe.Id, _recipeImage);
            }
            if (_recipe.ImageAction == ImageAction.Remove) 
            {
                _recipe.Image = null;
            }
            StateHasChanged();
        }
    }

    private async Task<bool> ProcessImage(string recipeId,IBrowserFile? image)
    {
        var imageUploadResponse = await ImageManager.UploadImage(recipeId, image);
        if (string.IsNullOrWhiteSpace(imageUploadResponse))
        {
            _errorMessage = "Your recipe was saved but there was a problem uploading the image";
            return false;
        }
        _recipe.Image = imageUploadResponse;
        return true;
    }
 }
