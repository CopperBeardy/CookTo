@inherits InputBase<PartIngredient>

<div class="d-flex flex-row">
    <div class="col-sm-2 me-1">
        <label for="quantityInput" class="font-weight-bold text-secondary me-1">Quantity</label>
        <input  min=0
                       id="quantityInput"
                     type="number"
                     class="form-control "
                     @onchange="OnChangeQuantity"
                     value="@_quantity" />
    </div>

    <div class="col-sm-2 me-1">
        <label for="measureUnitSelect" class="font-weight-bold text-secondary me-1">Unit</label>
        <select 
                      id="measureUnitSelect"
                     class="form-control "
                     @onchange="@OnChangeUnit"
                     value="_unit">
                     @foreach (var unit in Enum.GetValues(typeof(MeasureUnit)))
                     {
                         <option value="@unit">@unit</option>
                     }
        </select>
    </div>

    <div class="col-3 me-1">
        <label for="ingredientInput" class="font-weight-bold text-secondary me-1">Ingredient</label>
         <select id="ingredientSelect"
                    class="form-control"
                    @onchange="OnChangeSetIngredient" selectedItem="_ingredient" >
                @foreach(var ing in Ingredients)
            {
                <option value="@ing.Name">@ing.Name</option>
            }
        </select>

    </div>

    <div class="col-4">
        <label for="descriptionInput" class="font-weight-bold text-secondary me-1">Description</label>
        <input id="decsriptionInput"
                     class="form-control "
                     type="text"
                     placeholder="additional information"
                     value="@_description"
                     @onchange="OnChangeDescription"/>
    </div>
</div>

@code {
    public List<IngredientDto>? Ingredients { get; set; }
    private double _quantity;
    private MeasureUnit _unit ;
    private string _ingredient ;
    private string _description ;

    [CascadingParameter]
    public PartIngredient? PartIngredient { get; set; } = new();


    protected override async Task OnInitializedAsync()
    {
        Ingredients = new List<IngredientDto>()
        {
            new IngredientDto(){Id="1231241241", Name="White Flour"},
            new IngredientDto(){Id="122241241", Name="Caster Sugar"},
        };
        await InvokeAsync(StateHasChanged);
    }

    private void OnChangeQuantity(ChangeEventArgs args) 
    {
        double.TryParse(args.Value?.ToString(), out _quantity);
        SetCurrentValues();
    }
    private void OnChangeUnit(ChangeEventArgs args)
    {
        _unit =  (MeasureUnit)Enum.Parse(typeof(MeasureUnit),args.Value?.ToString());
        SetCurrentValues();
    }

    private void OnChangeDescription(ChangeEventArgs args)
    {
        var temp = args.Value?.ToString();
        if (string.IsNullOrEmpty(temp))
        {
            _description = string.Empty;
        }
        else
        {
            _description = temp;

        }
        SetCurrentValues();
    }


    public void OnChangeSetIngredient(ChangeEventArgs args)
    {
        _ingredient = args.Value?.ToString();
        SetCurrentValues();
    }

    protected void SetCurrentValues()
    {
        PartIngredient.Unit = _unit;
        PartIngredient.Amount = _quantity;
        PartIngredient.Description = _description;

        var ingredient = Ingredients.Where(x => x.Name == _ingredient).FirstOrDefault();
        if (ingredient != null)
        {
            PartIngredient.Ingredient = ingredient;
        }
        else
        {
            //Todo add new ingredient to db
            PartIngredient.Ingredient = new IngredientDto() { Id = "fsfsdf", Name = _ingredient };
        }
    }
    protected override bool TryParseValueFromString(string? value,
        out PartIngredient result,
        out string validationErrorMessage) => throw new NotImplementedException();
}
