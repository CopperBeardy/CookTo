@page "/add-recipe"

@inject IMediator Mediator

<PageTitle>Add Recipe - CookTo</PageTitle>

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/">Home</a></li>
        <li class="breadcrumb-item active" aria-current="page">Add Recipe</li>
    </ol>
</nav>

@if (_submitSuccessful)
{
    <div class="alert alert-success" role="alert">
        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="currentColor" class="bi bi-check-circle-fill" viewBox="0 0 16 16">
            <path fill-rule="evenodd" d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z" />
        </svg>
        Your Recipe has been submitted successfully!
    </div>
}
else if (_errorMessage is not null)
{
    <div class="alert alert-danger" role="alert">
        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="currentColor" class="bi bi-x-circle-fill" viewBox="0 0 16 16">
            <path fill-rule="evenodd" d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM5.354 4.646a.5.5 0 1 0-.708.708L7.293 8l-2.647 2.646a.5.5 0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0 .708-.708L8.707 8l2.647-2.646a.5.5 0 0 0-.708-.708L8 7.293 5.354 4.646z" />
        </svg>
        @_errorMessage
    </div>
}

<h3 class="mt-5 mb-4">Add a Recipe</h3>


<EditForm OnValidSubmit="SubmitForm" EditContext="_editContext">
    <FluentValidationValidator />
    <FormSection Title="Details"
                 HelpText="This information is for giving a breif overview of the recipe">
        <FormFieldSet Width="col-6">
            <label for="recipeTitle" class="font-weight-bold text-secondary">Title</label>
            <InputText @bind-Value="_recipe.Title" class="form-control" id="recipeTitle" />
            <ValidationMessage For="@(() => _recipe.Title)" />
        </FormFieldSet>
        <FormFieldSet Width="col-6">
            <label for="category" class="font-weight-bold text-secondary">Category</label>
            <InputSelect TValue="Category" @bind-Value="_recipe.Category" class="form-control" id="category">
                @foreach (var category in Enum.GetValues(typeof(Category)))
                {
                    <option value="@category">@category</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => _recipe.Category)" />
        </FormFieldSet>
        <FormFieldSet>
            <label for="recipeDescription" class="font-weight-bold text-secondary">Description</label>
            <InputTextArea @bind-Value="_recipe.Description" rows="6" class="form-control" id="recipeDescription" />
            <ValidationMessage For="@(() => _recipe.Description)" />
        </FormFieldSet>
        @*Add image upload*@
        <FormFieldSet Width="col-3">
            <label for="preparationTime" class="font-weight-bold text-secondary">Preperation Time</label>
            <InputNumber min=0 @bind-Value="_recipe.PreparationTime" class="form-control" id="preparationTime" />
            <ValidationMessage For="@(() => _recipe.PreparationTime)" />
        </FormFieldSet>
        <FormFieldSet Width="col-3">
            <label for="cookingTime" class="font-weight-bold text-secondary">Cooking Time</label>
            <InputNumber min=0 @bind-Value="_recipe.CookingTime" class="form-control" id="cookingTime" />
            <ValidationMessage For="@(() => _recipe.CookingTime)" />
        </FormFieldSet>
        <FormFieldSet Width="col-3">
            <label for="serves" class="font-weight-bold text-secondary">Serves</label>
            <InputNumber min=0 @bind-Value="_recipe.Serves" class="form-control" id="serves" />
            <ValidationMessage For="@(() => _recipe.Serves)" />
        </FormFieldSet>
    </FormSection>

    <FormSection Title="Recipe parts"
                 HelpText="Define the various parts of the recipe and there ingredients">
        <FormFieldSet>
          
            @foreach (var recipePart in _recipe.RecipeParts)
            {
                <div class=row>
                    <div class="row">
                        <div class="form-group">
                            <label for="recipePartTitle" class="font-weight-bold text-secondary">Part Title</label>
                            <InputText @bind-Value="recipePart.PartTitle" class="form-control" id="recipePartTitle" />
                            <ValidationMessage For="@(() => recipePart.PartTitle)" />
                        </div>
                    </div>

                    <div class="row">
                    
                        @foreach (var partIngredient in recipePart.Items)
                        {
                          <label >@partIngredient.ToString() </label>                        
                        <button @onclick="@(() => recipePart.Items.Remove(partIngredient))" class="btn btn-link" type="button">
                            <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-x-circle-fill text-danger" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                                <path fill-rule="evenodd" d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM5.354 4.646a.5.5 0 1 0-.708.708L7.293 8l-2.647 2.646a.5.5 0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0 .708-.708L8.707 8l2.647-2.646a.5.5 0 0 0-.708-.708L8 7.293 5.354 4.646z" />
                            </svg>
                        </button>
                
                        }
                        @*remove part button*@
                        <div class="row">
                            <div class="col">
                                <button class="btn btn-outline-primary" type="button" @onclick="@(() => recipePart.Items.Add(new RecipeDto.RecipePart.PartIngredient()))">Add Part Ingredient</button>
                                <ValidationMessage For="@(() => recipePart.Items)" />
                            </div>
                        </div>
                    </div>

                    <div class="col-1 d-flex mt-3">
                        <button @onclick="@(() => _recipe.RecipeParts.Remove(recipePart))" class="btn btn-link" type="button">
                            <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-x-circle-fill text-danger" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                                <path fill-rule="evenodd" d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM5.354 4.646a.5.5 0 1 0-.708.708L7.293 8l-2.647 2.646a.5.5 0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0 .708-.708L8.707 8l2.647-2.646a.5.5 0 0 0-.708-.708L8 7.293 5.354 4.646z" />
                            </svg>
                        </button>
                    </div>
                </div>

            }
            <div class="row">
                <div class="col">
                    <button class="btn btn-outline-primary" type="button" @onclick="@(() => _recipe.RecipeParts.Add(new RecipeDto.RecipePart()))">Add Recipe Part</button>
                    <ValidationMessage For="@(() => _recipe.RecipeParts)" />
                </div>
            </div>
        </FormFieldSet>
    </FormSection>

    <FormSection Title="Cooking steps"
                 HelpText="Tell the steps that need to be taken to make this this recipe">
        <FormFieldSet>
            @{
                var i = 0;
            }
            @foreach (var cookingStep in _recipe.CookingSteps)
            {
                i++;
                cookingStep.OrderNumber = i;
                <div class="row">
                    <div class="col-2">
                        <div class="form-group">
                            <label class="font-weight-bold text-secondary">Order</label>
                            <p>@cookingStep.OrderNumber</p>
                        </div>
                    </div>
                    <div class="col">
                        <div class="form-group">
                            <label for="cookingStepDescription" class="font-weight-bold text-secondary">Description</label>
                            <InputText @bind-Value="cookingStep.StepDescription" class="form-control" id="cookingStepDescription" />
                            <ValidationMessage For="@(() => cookingStep.StepDescription)" />
                        </div>
                    </div>
                    <div class="col-1 d-flex mt-3">
                        <button @onclick="@(() => _recipe.CookingSteps.Remove(cookingStep))" class="btn btn-link" type="button">
                            <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-x-circle-fill text-danger" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                                <path fill-rule="evenodd" d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM5.354 4.646a.5.5 0 1 0-.708.708L7.293 8l-2.647 2.646a.5.5 0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0 .708-.708L8.707 8l2.647-2.646a.5.5 0 0 0-.708-.708L8 7.293 5.354 4.646z" />
                            </svg>
                        </button>
                    </div>
                </div>
            }

            <div class="row">
                <div class="col">
                    <button class="btn btn-outline-primary" type="button" @onclick="@(() => _recipe.CookingSteps.Add(new RecipeDto.CookingStep()))">Add CookingStep</button>
                    <ValidationMessage For="@(() => _recipe.CookingSteps)" />
                </div>
            </div>

        </FormFieldSet>
    </FormSection>

    <FormSection Title="Tips"
                 HelpText="Create tips for making various parts of the recipe">
        <FormFieldSet></FormFieldSet>
    </FormSection>

    <div class="mt-4 mb-5">
        <div class="row">
            <div class="offset-4 col-8 text-right">
                <button class="btn btn-outline-secondary" type="button" @onclick="@(() => _recipe = new RecipeDto())">Reset</button>
                <button class="btn btn-primary" type="submit">Submit</button>
            </div>
        </div>
    </div>
</EditForm>


@code {

    private RecipeDto _recipe = new RecipeDto();
    public IEnumerable<IngredientDto>? Ingredients { get; set; } = new List<IngredientDto>() { };
    public string newIngredient { get; set; } = "";
    private bool _submitSuccessful;
    private string? _errorMessage;
    private EditContext _editContext = default!;

    protected override void OnInitialized()
    { _recipe.RecipeParts.Add(new RecipeDto.RecipePart()
            {
                PartTitle = "Filling",
                Items = new List<RecipeDto.RecipePart.PartIngredient>()
             {
                 new RecipeDto.RecipePart.PartIngredient(){ Amount=3,Unit=MeasureUnit.g,Name="Flour",Description="White Bread Flour"},
                 new RecipeDto.RecipePart.PartIngredient(){ Amount=3,Unit=MeasureUnit.g,Name="Flour",Description="White Bread Flour"}
             }
            });
        _editContext = new EditContext(_recipe);
        _editContext.SetFieldCssClassProvider(new BootstrapCssClassProvider());
    }

    private async Task SubmitForm()
    {
       
        //todo : get current user name
        var response = await Mediator.Send(new AddRecipeRequest(_recipe));
        if (response.recipe == null)
        {
            _errorMessage = "There was a problem saving your Recipe.";
            _submitSuccessful = false;
            return;
        }
        _recipe = new RecipeDto();
        _errorMessage = null;
        _submitSuccessful = true;
    }


}
