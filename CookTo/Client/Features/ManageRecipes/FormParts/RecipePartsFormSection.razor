@inject IIngredientManager Manager

<FormSection Title="Recipe parts"
             HelpText="Define the various parts of the recipe and there ingredients">
    <FormFieldSet>

        @foreach (var part in Recipe.RecipeParts)
        {
            <div class="row">
                <FormInputGroup Id="partTitle" Label="PartTitle" Width="col-8" Margins="mb-2">
                    <InputText @bind-Value="part.PartTitle" class="form-control" id="partTitle" />
                    <ValidationMessage For="@(() => part.PartTitle)" />
                </FormInputGroup>
                <div class="col-sm-1">
                    <button class="btn link-danger " @onclick="@(() => Recipe.RecipeParts.Remove(part))" type="button"><i class="bi bi-dash-circle"></i></button>
                </div>
            </div>
            <div class="ml-3">
                @foreach (var ingred in part.Items)
                {
                    <div class="row gy-1 gx-1 align-items-center mb-2">
                        <FormInputGroup Id="quantityInput" Label="Quantity" Width="col-auto">
                            <input type="number" min=0 id="quantityInput" class="form-control  " @bind="ingred.Amount" />
                            <ValidationMessage For="@(() =>  ingred.Amount)" />
                        </FormInputGroup>

                        <FormInputGroup Id="measureUnitSelect" Label="Unit" Width="col-auto">
                            <InputSelect id="measureUnitSelect" class="form-control " @bind-Value="ingred.Unit">
                                @foreach (var unit in Enum.GetValues(typeof(MeasureUnit)))
                                {
                            <option value="@unit">@unit</option>
                                }
                    </InputSelect>
                    <ValidationMessage For="@(() =>  ingred.Unit)" />
                </FormInputGroup>

                <FormInputGroup Id="ingredientSelect" Label="Ingredient" Width="col-auto">
                    <InputSelect id="ingredientSelect" class="form-control " @bind-Value="ingred.IngredientName">
                        <option>Select Ingredient...</option>
                        @foreach (var ing in Ingredients)
                                {
                            <option value="@ing.Name">@ing.Name</option>
                                }
                    </InputSelect>
                    <ValidationMessage For="@(() =>  ingred.IngredientName)" />
                </FormInputGroup>

                <FormInputGroup Id="descriptionInput" Label="Description" Width="col-auto">
                    <InputText id="decsriptionInput" class="form-control " placeholder="additional information" @bind-Value="ingred.AdditionalInformation" />
                    <ValidationMessage For="@(() =>  ingred.AdditionalInformation)" />
                </FormInputGroup>

                <button @onclick="@(() => part.Items.Remove(ingred))" class="btn link-danger col-auto ml-3" type="button"><i class="bi bi-dash-circle"></i></button>
            </div>
                }
                <button class="btn btn-outline-primary col-2 mb-2" type="button" @onclick="@(() => part.Items.Add(new PartIngredient()))">Add Ingredient </button>
                <ValidationMessage For="@(() => part.Items)" />
            </div>
        }
        <div class="row">
            <div class="col">
                <button class="btn btn-outline-primary" type="button" @onclick="@(() => Recipe.RecipeParts.Add(new RecipePart()))">Add RecipePart</button>
                <ValidationMessage For="@(() => Recipe.RecipeParts)" />
            </div>
        </div>
    </FormFieldSet>
</FormSection>

@code {
    [Parameter] public RecipeDto Recipe { get; set; }
    public IEnumerable<IngredientDto> Ingredients { get; set; } = new List<IngredientDto>();

    protected override async Task OnInitializedAsync()
    {
        Ingredients = await Manager.GetAll();
        StateHasChanged();
    }

}
