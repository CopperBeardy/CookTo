@inject IngredientManager Manager
<div class="col col-sm-6">
    <BlazoredTypeahead MaximumSuggestions=3 id="typeaheadInput"
                       SearchMethod="SearchItems"
                       @bind-Value="CurrentValue"
                       placeholder="Search"
                       role="combobox"
                       aria-required="true"
                       aria-expanded="false"
                       aria-controls="true"
                      aria-haspopup="true" 
                       EnableDropDown="false"
                       AddItemOnEmptyResultMethod="HandleAdd">
        <SelectedTemplate Context="item">
         <span role="menuitem">@item.Text</span> 
        </SelectedTemplate>
        <ResultTemplate Context="item">
            @item.Text
        </ResultTemplate>
        <NotFoundTemplate Context="searchText">
            <span role="menuitem">Add "@searchText" as a new Ingredient <br />
            new Ingredient will be selected after being added.</span>
        </NotFoundTemplate>
    </BlazoredTypeahead>
    <ValidationMessage aria-alert="true" For="@(() => CurrentPartIngredient.Ingredient)" />

</div>
@code {

        [Parameter]public PartIngredient CurrentPartIngredient{ get; set; }   
        [Parameter]  public IList<Ingredient> Ingredients { get; set; } = new List<Ingredient>();

        private async Task<IEnumerable<Ingredient>> SearchItems(string searchText) => await Task.FromResult(Ingredients.Where(x => x.Text.ToLower().Contains(searchText.ToLower())).ToList());

        private async Task<Ingredient> HandleAdd(string searchAdd)
        {
            var result = await Manager.Insert(new Ingredient() { Text = searchAdd.ToLower() });
            if (result is null) return null;

        Ingredients.Add(result);
        return await Task.FromResult(result);
      
    }
}