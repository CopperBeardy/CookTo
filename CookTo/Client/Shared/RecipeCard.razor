@inject NavigationManager NavManager

<div class="card shadow" style="width: 18rem;">
    <img  width="190" height="150" src="@(!string.IsNullOrWhiteSpace(Recipe.Image) ? $"images/{Recipe.Image}" : "https://via.placeholder.com/286x190.jpg?text=No+Image+For+Trail")" class="card-img-top ">
    <div class="card-body">
 
        <div class="d-flex justify-content-between  align-content-center">
        <h6 class="card-title">@Recipe.Title</h6>      
        <h6 class="card-subtitle mb-3 text-muted"><span class="bi bi-grid mr-2"></span>  @Recipe.Category</h6>
       </div> 
       <div class="d-flex justify-content-between  align-content-center">
            <span><span class="bi bi-person mr-2"></span> @Recipe.AuthorId</span>
             </div>      
       
         <div class="d-flex flex-row-reverse gap-1">
        <button class="btn btn-primary" title="View" @onclick="@(async () => await OnSelected.InvokeAsync(Recipe))">
            <i class="bi bi-binoculars"></i>
        </button>
        <FavoriteButton Recipe="Recipe" />
        <AuthorizeView>
            @if (Recipe.AuthorId.Equals(context.User?.Identity?.Name, StringComparison.CurrentCultureIgnoreCase) || context.User.IsInRole("Administrator"))
            {
                <button class="btn btn-outline-secondary float-right" title="Edit" @onclick="@(() => NavManager.NavigateTo($"/edit-recipe/{Recipe.Id}"))">
                    <i class="bi bi-pencil"></i>
                </button>
            }
        </AuthorizeView>
        </div>
    </div>
</div>

@code {
    [Parameter, EditorRequired] public RecipeDto Recipe { get; set; } = null!;
    [Parameter, EditorRequired] public EventCallback<RecipeDto> OnSelected { get; set; }
}