@page "/search/{SearchTerm}"
@using CookTo.Shared.Modules

@inject             IRecipeSummaryManager RecipeSummaryManager;

<PageTitle>Search Results - CookTo</PageTitle>
<BreadCrumb PageName="Search" />

   <div class="card shadow-lg p-2">
            <div class="d-flex flex-row justify-content-between">
                <SearchFilter FilterChanged="@HandleFilterChanged" />
                <SortResults SortChanged="@HandleSortChanged" />
            </div>
        </div>


@if( _filteredResults is null )
{
    <p>Search results loading....</p>
}
else
{  
    if (_filteredResults.Any())
    {
        foreach (var summary in _filteredResults)
        {
            <RecipeCard RecipeSummary="@summary" />
        }
    }
    else
    {  
        <p>Sorry no recipes found</p>       
    }
    <div class="mb-4 mt-4"> 
        <p class="font-italic text-center">Have a recipe to share <a aria-label="navAddRecipe" href="add-recipe">Add Recipe here</a>.</p>
    </div>
}


@code {
    private IEnumerable<RecipeSummary>? _searchResults = new List<RecipeSummary>();
    private List<RecipeSummary>? _filteredResults = new List<RecipeSummary>();
    public SortOptions SortOption { get; set; } = SortOptions.TitleAsc;
    private bool isLoading  = true;
    [Parameter] public string SearchTerm { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        _searchResults = await RecipeSummaryManager.GetByTerm(SearchTerm);
        if (!_searchResults.Any())
        {
            _filteredResults = _searchResults.ToList();
            HandleSortChanged(SortOption);
            isLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    public void HandleFilterChanged(Filter filter)
    {
        if (_searchResults is not null)
        {
            _filteredResults = _searchResults.ToList();
            if (!string.IsNullOrEmpty(filter.Category))
            {
                _filteredResults = _filteredResults.Where(r => r.Category.Name.Equals(filter.Category)).ToList();
            }
            if (!string.IsNullOrEmpty(filter.Cuisine))
            {
                _filteredResults = _filteredResults.Where(r => r.Cuisine.Name.Equals(filter.Cuisine)).ToList();
            }
        }
        HandleSortChanged(SortOption);
    }

    public void HandleSortChanged(SortOptions sortOption)
    {
        SortOption = sortOption;
        if (_filteredResults is not null && _filteredResults.Any())
        {
            switch (SortOption)
            {
                case SortOptions.TitleAsc:
                    _filteredResults = _filteredResults.OrderBy(summary => summary.Title).ToList();
                    break;
                case SortOptions.TitleDesc:
                    _filteredResults = _filteredResults.OrderByDescending(summary => summary.Title).ToList();
                    break;
                case SortOptions.CuisineAsc:
                    _filteredResults = _filteredResults.OrderBy(summary => summary.Cuisine.Name).ToList();
                    break;
                case SortOptions.CuisineDesc:
                    _filteredResults = _filteredResults.OrderByDescending(summary => summary.Cuisine.Name).ToList();
                    break;
                case SortOptions.CategoryAsc:
                    _filteredResults = _filteredResults.OrderBy(summary => summary.Category.Name).ToList();
                    break;
                case SortOptions.CategoryDesc:
                    _filteredResults = _filteredResults.OrderByDescending(summary => summary.Category).ToList();
                    break;
            }
        }
    }

}
